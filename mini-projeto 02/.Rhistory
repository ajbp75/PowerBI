cls
clear
help()
install.packages("tabuSearch")
solucao = c(1,0,1,1,1,0,1,0,1,1,1,0)
valores = c(1.1,1.2,1.25,1.41,1.5,1.63,2.05,2.22,2.65,2.9,3.04,3.16)
soma = 0;
produto = 1;
for (i in 1:12) {
if (solucao[i]==1)
{
soma = soma + valores[i];
produto = produto * valores[i];
}
}
if (soma==7.11 & produto==7.11)
{
return(7.11)
}
else
{
return(0)
if (soma==7.11 & produto==7.11)
{
return(7.11)
}
else
{
return(0)
}
library(tabuSearch)
z = tabuSearch(size = 12, iters = 1000, objFunc = compras,
listSize = 9, nRestarts = 10, repeatAll = 1, verbose = T)
plot(z)
summary(z)
summary(z, verbose = TRUE)
library(tabuSearch)
z = tabuSearch(size = 12, iters = 1000, objFunc = compras,
listSize = 9, nRestarts = 10, repeatAll = 1, verbose = T)
plot(z)
summary(z)
summary(z, verbose = TRUE)
plot(z)
summary(z)
summary(z, verbose = TRUE)
plot(z)
summary(z)
library(tabuSearch)
z = tabuSearch(size = 12, iters = 1000, objFunc = compras,
listSize = 9, nRestarts = 10, repeatAll = 1, verbose = T)
plot(z)
summary(z)
library(tabuSearch)
z = tabuSearch(size = 12, iters = 1000, objFunc = compras,
listSize = 9, nRestarts = 10, repeatAll = 1, verbose = T)
plot(z)
summary(z)
library(tabuSearch)
z = tabuSearch(size = 12, iters = 1000, objFunc = compras,
listSize = 9, nRestarts = 10, repeatAll = 1, verbose = T)
plot(z)
summary(z)
library(tabuSearch)
z = tabuSearch(size = 12, iters = 1000, objFunc = compras,
listSize = 9, nRestarts = 10, repeatAll = 1, verbose = T)
plot(z)
summary(z)
library(tabuSearch)
z = tabuSearch(size = 12, iters = 1000, objFunc = compras,
listSize = 9, nRestarts = 10, repeatAll = 1, verbose = T)
plot(z)
summary(z)
library(tabuSearch)
z = tabuSearch(size = 12, iters = 1000, objFunc = compras,
listSize = 9, nRestarts = 10, repeatAll = 1, verbose = T)
plot(z)
summary(z)
library(tabuSearch)
z = tabuSearch(size = 12, iters = 1000, objFunc = compras,
listSize = 9, nRestarts = 10, repeatAll = 1, verbose = T)
plot(z)
summary(z)
install.packages("tabuSearch")
z = tabuSearch(size = 12, iters = 1000, objFunc = compras,
listSize = 9, nRestarts = 10, repeatAll = 1, verbose = T)
source('~/Python/SuperFormacao/Professor/2.Algoritmos de Busca e Otimização/scripts/6.2.TabuFuncao.R')
source('~/Python/SuperFormacao/Professor/2.Algoritmos de Busca e Otimização/scripts/6.2.TabuFuncao.R')
source('~/Python/SuperFormacao/Professor/2.Algoritmos de Busca e Otimização/scripts/6.2.TabuFuncao.R')
source('~/Python/SuperFormacao/Professor/2.Algoritmos de Busca e Otimização/scripts/6.2.TabuFuncao.R')
source('~/Python/SuperFormacao/Professor/2.Algoritmos de Busca e Otimização/scripts/6.2.TabuFuncao.R')
source('~/Python/SuperFormacao/Professor/2.Algoritmos de Busca e Otimização/scripts/6.2.TabuFuncao.R')
source('~/Python/SuperFormacao/Professor/2.Algoritmos de Busca e Otimização/scripts/6.2.TabuFuncao.R')
source('~/Python/SuperFormacao/Professor/2.Algoritmos de Busca e Otimização/scripts/6.2.TabuFuncao.R')
compras <- function(solucao)
{
#solucao = c(1,0,1,1,1,0,1,0,1,1,1,0)
valores = c(1.1,1.2,1.25,1.41,1.5,1.63,2.05,2.22,2.65,2.9,3.04,3.16)
soma = 0;
produto = 1;
for (i in 1:12) {
if (solucao[i]==1)
{
soma = soma + valores[i];
produto = produto * valores[i];
}
}
if (soma==7.11 & produto==7.11)
{
return(7.11)
}
else
{
return(0)
}
}
install.packages("tabuSearch")
library(tabuSearch)
z = tabuSearch(size = 12, iters = 1000, objFunc = compras,
listSize = 9, nRestarts = 10, repeatAll = 1, verbose = T)
plot(z)
summary(z)
summary(z, verbose = TRUE)
install.packages("GenSA")
#install.packages("GenSA")
library(GenSA)
library(GenSA)
resultado <- GenSA(lower = c(0,0), upper = c(9,9), fn = Rosenbrock, control=list(verbose=TRUE))
resultado$par
install.packages("GA")
library(GA)
f <-function(x)
{
#equação 2* x + 5 = 20
resultado = 2 * x + 5
if (resultado > 20)
return (20 - resultado)
else
return (resultado - 20)
}
resultado = ga("real-value", fitness = f, min=c(-20),max=c(20) ,popSize = 10, maxiter = 10,  monitor = T, names= c("a"))
summary(resultado)
plot(resultado)
library(GA)
#funcao de adaptacao
f <-function(x)
{
#equação 2* x + 5 = 20
resultado = 2 * x + 5
if (resultado > 20)
return (20 - resultado)
else
return (resultado - 20)
}
resultado = ga("real-value", fitness = f, min=c(-20),max=c(20) ,popSize = 10, maxiter = 10,  monitor = T, names= c("a"))
summary(resultado)
f
f(7.5)
plot(resultado)
f <-function(x)
{
#equação 2* x + 5 = 20
resultado = 2 * x + 20
if (resultado > 20)
return (20 - resultado)
else
return (resultado - 20)
}
#algoritmo genetico
resultado = ga("real-value", fitness = f, min=c(-20),max=c(20) ,popSize = 10, maxiter = 10,  monitor = T, names= c("a"))
#resultado
summary(resultado)
#solucao
summary(resultado)$solution
#grafico da evolucao
plot(resultado)
#funcao de adaptacao
f <-function(x)
{
#equação 2* x + 5 = 20
resultado = 2 * x + 2000
if (resultado > 20)
return (20 - resultado)
else
return (resultado - 20)
}
#algoritmo genetico
resultado = ga("real-value", fitness = f, min=c(-20),max=c(20) ,popSize = 10, maxiter = 10,  monitor = T, names= c("a"))
#resultado
summary(resultado)
#solucao
summary(resultado)$solution
#grafico da evolucao
plot(resultado)
resultado = ga("real-value", fitness = f, min=c(-20),max=c(20) ,popSize = 10, maxiter = 100,  monitor = T, names= c("a"))
#resultado
summary(resultado)
#solucao
summary(resultado)$solution
#grafico da evolucao
plot(resultado)
library(GA)
#funcao de adaptacao
f <-function(x)
{
#equação 2* x + 5 = 20
resultado = 2 * x + 110000
if (resultado > 20)
return (20 - resultado)
else
return (resultado - 20)
}
#algoritmo genetico
resultado = ga("real-value", fitness = f, min=c(-20),max=c(20) ,popSize = 10, maxiter = 100,  monitor = T, names= c("a"))
#resultado
summary(resultado)
#solucao
summary(resultado)$solution
#grafico da evolucao
plot(resultado)
mochila <- data.frame(item = c("canivete", "feijao", "batatas", "lanterna",
"saco de dormir", "corda", "bussula"), pontos = c(10, 20, 15, 2, 30,
10, 30), peso = c(1, 5, 10, 1, 7, 5, 1))
f <-function(x)
{
pontos = 0
peso = 0
for (i in 1:7)
{
if (x[ i ] != 0)
{
pontos = pontos + mochila[i,2]
peso = peso +  mochila[i,3]
}
}
if (peso > 15)
pontos = 0
return( pontos)
}
#algoritmo genetico
resultado = ga("binary", fitness = f, nBits = 7,popSize = 10, maxiter = 15,  names= c("canivete", "feijão", "batatas", "lanterna", "saco de dormir", "corda", "bussula"))
#resultados
summary(resultado)
#solucao
summary(resultado)$solution
#grafico de evolucao
plot(resultado)
q()
cls
clearPushBack(clearPushBack())
2+2
2+2
#Pasta de Trabalho
setwd("E:/Fontes_Estudo/PowerBI/mini-projeto 02")
getwd()
#Pasta de Trabalho
setwd("E:/Fontes_Estudo/PowerBI/mini-projeto 02")
getwd()
#Pacotes
install.packages("dplyr")
install.packages("data.table")
install.packages("ggplot2")
#Carregar Pacotes
library(dplyr)
library(data.table)
install.packages("data.table")
install.packages("data.table")
#Pasta de Trabalho
setwd("E:/Fontes_Estudo/PowerBI/mini-projeto 02")
getwd()
#Pacotes
install.packages("dplyr")
#Carregar Pacotes
library(dplyr)
library(data.table)
library(ggplot2)
#Carregar Dados
dados_iris <- iris
View(dados_iris)
#Tarefa 1
medias_iris <- summarize(group_by(dados_iris, Species),
media_sepal_length = mean(Sepal.Length),
media_sepal_width = mean(Sepal.Width),
media_petal_length = mean(Petal.Length),
media_petal_width = mean(Petal.Width)
)
#Tarefa 1
library(dplyr)
medias_iris <- summarize(group_by(dados_iris, Species),
media_sepal_length = mean(Sepal.Length),
media_sepal_width = mean(Sepal.Width),
media_petal_length = mean(Petal.Length),
media_petal_width = mean(Petal.Width)
)
medias_iris <- summarize(group_by(dados_iris, Species),
media_sepal_length = mean(Sepal.Length),
media_sepal_width = mean(Sepal.width),
media_petal_length = mean(Petal.Length),
media_petal_width = mean(Petal.width)
)
medias_iris <- summarize(group_by(dados_iris, Species),
media_sepal_length = mean(Sepal.Length),
media_sepal_width = mean(Sepal.Width),
media_petal_length = mean(Petal.Length),
media_petal_width = mean(Petal.Width)
)
View(medias_iris)
#Tarefa 2 - Extrair o valor inteiro de uma das colunas decimais
library(data.table)
dados_iris_id <- data.table(dados_iris)
View(dados_iris_id)
dados_iris_id <- setDT(dados_iris_id, keep.rownames = TRUE)[]
View(dados_iris_id)
dados_iris_id$id <- as.integer(dados_iris_id$id)
View(dados_iris_id)
#Tarefa 2 - Extrair o valor inteiro de uma das colunas decimais
library(data.table)
dados_iris_id <- data.table(dados_iris)
View(dados_iris_id)
dados_iris_id <- setDT(dados_iris_id, keep.rownames = TRUE)[]
setnames(dados_iris_id,1,"id")
dados_iris_id$id <- as.integer(dados_iris_id$id)
View(dados_iris_id)
dados_iris_id <- data.table(dados_iris)
View(dados_iris_id)
dados_iris_id$Sepal.Length <- as.integer(dados_iris_id$Sepal.Length)
View(dados_iris_id)
#Tarefa 3 - Construir um gráfico mostrando a relação de duas variáveis númericas
library(ggplot2)
ggplot(data = dados_iris, aes(x = Petal.Width, y = Petal.Length)) +
geom_point(aes(color = Species), Size = 3) +
ggtitle("Largura e Comprimento das Pétalas") +
labs(x = "Largura da Pétala",
y = "Comprimento da Pétala") +
theme_bw() +
theme(title = element_text(size= 15, color = "turquoise4"))
#Cores disponíveis na Linguagem R
colors()
