summary(resultado)$solution
#grafico da evolucao
plot(resultado)
library(GA)
#funcao de adaptacao
f <-function(x)
{
#equação 2* x + 5 = 20
resultado = 2 * x + 110000
if (resultado > 20)
return (20 - resultado)
else
return (resultado - 20)
}
#algoritmo genetico
resultado = ga("real-value", fitness = f, min=c(-20),max=c(20) ,popSize = 10, maxiter = 100,  monitor = T, names= c("a"))
#resultado
summary(resultado)
#solucao
summary(resultado)$solution
#grafico da evolucao
plot(resultado)
mochila <- data.frame(item = c("canivete", "feijao", "batatas", "lanterna",
"saco de dormir", "corda", "bussula"), pontos = c(10, 20, 15, 2, 30,
10, 30), peso = c(1, 5, 10, 1, 7, 5, 1))
f <-function(x)
{
pontos = 0
peso = 0
for (i in 1:7)
{
if (x[ i ] != 0)
{
pontos = pontos + mochila[i,2]
peso = peso +  mochila[i,3]
}
}
if (peso > 15)
pontos = 0
return( pontos)
}
#algoritmo genetico
resultado = ga("binary", fitness = f, nBits = 7,popSize = 10, maxiter = 15,  names= c("canivete", "feijão", "batatas", "lanterna", "saco de dormir", "corda", "bussula"))
#resultados
summary(resultado)
#solucao
summary(resultado)$solution
#grafico de evolucao
plot(resultado)
q()
cls
clearPushBack(clearPushBack())
2+2
2+2
setwd("~/")
setwd("E:/Fontes_Estudo/PowerBI/mini-projeto 03")
setwd("E:/Fontes_Estudo/PowerBI/mini-projeto 03")
getwd()
#Instalando os pacotes
install.packages('Amelia')
install.packages('caret')
install.packages('dplyr')
install.packages('reshape')
install.packages('randomForest')
install.packages('el071')
library(Amelia)
library(ggplot2)
library(caret)
library(dplyr)
library(reshape)
library(randomForest)
library(el071)
install.packages('el071')
library(el071)
install.packages('e1071')
#Carregando os pacotes
library(Amelia)
library(ggplot2)
library(caret)
library(dplyr)
library(reshape)
library(randomForest)
library(e1071)
#Carregando DataSet
dados_clientes <- read.csv("dados/dataset.csv")
#Visualizar a estrutura
View(dados_clientes)
str(dados_clientes)
dim(dados_clientes)
str(dados_clientes)
summary(dados_clientes)
str(dados_clientes)
#Removendo a primeira coluna ID
dados_clientes$ID <- NULL
dim(dados_clientes)
View(dados_clientes)
#Renomeando a Coluna Classe
colnames(dados_clientes)
colnames(dados_clientes)[24] <- 'inadeplente'
colnames(dados_clientes)
View(dados_clientes)
colnames(dados_clientes)[24] <- 'Inadiplente'
colnames(dados_clientes)
View(dados_clientes)
#Verificando valores ausentes e removendo do dataset
sapply(dados_clientes, function(x) sum(is.na(x)))
?missmap
missmap(dados_clientes, main = "Valores Missing Observados")
dados_clientes <= na.omit(dados_clientes)
#Convertendo os alguns atributos  para fatores(categorias)
colnames(dados_clientes)
colnames(dados_clientes)[2] <- 'Genero'
colnames(dados_clientes)[3] <- 'Escolaridade'
colnames(dados_clientes)[4] <- 'Estado_Civil'
colnames(dados_clientes)[5] <- 'Idade'
colnames(dados_clientes)
View(dados_clientes)
#Genero
View(dados_clientes$Genero)
str(dados_clientes$Genero)
summary(dados_clientes$Genero)
dados_clientes$Genero <- cut(dados_clientes$Genero,
c(0,1,2),
Tabels = c('Masculino',
'Feminino'))
View(dados_clientes$Genero)
#Genero
View(dados_clientes$Genero)
str(dados_clientes$Genero)
summary(dados_clientes$Genero)
dados_clientes$Genero <- cut(dados_clientes$Genero,
c(0,1,2),
Tabels = c("Masculino",
"Feminino"))
#Genero
View(dados_clientes$Genero)
#Convertendo os alguns atributos  para fatores(categorias)
colnames(dados_clientes)
colnames(dados_clientes)[2] <- 'Genero'
colnames(dados_clientes)[3] <- 'Escolaridade'
colnames(dados_clientes)[4] <- 'Estado_Civil'
colnames(dados_clientes)[5] <- 'Idade'
colnames(dados_clientes)
View(dados_clientes)
#Genero
View(dados_clientes$Genero)
#Carregando DataSet
dados_clientes <- read.csv("dados/dataset.csv")
#Visualizar a estrutura
View(dados_clientes)
dim(dados_clientes)
str(dados_clientes)
summary(dados_clientes)
#Removendo a primeira coluna ID
dados_clientes$ID <- NULL
dim(dados_clientes)
View(dados_clientes)
#Renomeando a Coluna Classe
colnames(dados_clientes)
colnames(dados_clientes)[24] <- 'Inadiplente'
colnames(dados_clientes)
#Verificando valores ausentes nos campos e ver graficamento
sapply(dados_clientes, function(x) sum(is.na(x)))
missmap(dados_clientes, main = "Valores Missing Observados")
#Convertendo os alguns atributos  para fatores(categorias)
colnames(dados_clientes)
#Convertendo os alguns atributos  para fatores(categorias)
colnames(dados_clientes)
colnames(dados_clientes)[2] <- 'Genero'
colnames(dados_clientes)[3] <- 'Escolaridade'
colnames(dados_clientes)[4] <- 'Estado_Civil'
colnames(dados_clientes)[5] <- 'Idade'
colnames(dados_clientes)
View(dados_clientes)
#Genero
View(dados_clientes$Genero)
str(dados_clientes$Genero)
summary(dados_clientes$Genero)
dados_clientes$Genero <- cut(dados_clientes$Genero,
c(0,1,2),
Tabels = c("Masculino",
"Feminino"))
View(dados_clientes$Genero)
str(dados_clientes$Genero)
#Genero
View(dados_clientes$Genero)
#Carregando DataSet
dados_clientes <- read.csv("dados/dataset.csv")
#Visualizar a estrutura
View(dados_clientes)
dim(dados_clientes)
str(dados_clientes)
summary(dados_clientes)
#Removendo a primeira coluna ID
dados_clientes$ID <- NULL
#Removendo a primeira coluna ID
dados_clientes$ID <- NULL
dim(dados_clientes)
View(dados_clientes)
#Renomeando a Coluna Classe
colnames(dados_clientes)
colnames(dados_clientes)[24] <- 'Inadiplente'
colnames(dados_clientes)
View(dados_clientes)
#Verificando valores ausentes nos campos e ver graficamento
sapply(dados_clientes, function(x) sum(is.na(x)))
missmap(dados_clientes, main = "Valores Missing Observados")
dados_clientes <= na.omit(dados_clientes)
#Convertendo os alguns atributos  para fatores(categorias)
colnames(dados_clientes)
colnames(dados_clientes)[2] <- 'Genero'
colnames(dados_clientes)[3] <- 'Escolaridade'
colnames(dados_clientes)[4] <- 'Estado_Civil'
colnames(dados_clientes)[5] <- 'Idade'
colnames(dados_clientes)
View(dados_clientes)
#Genero
View(dados_clientes$Genero)
dados_clientes$Genero
str(dados_clientes$Genero)
summary(dados_clientes$Genero)
dados_clientes$Genero <- cut(dados_clientes$Genero,
c(0,1,2),
labels = c("Masculino",
"Feminino"))
View(dados_clientes$Genero)
str(dados_clientes$Genero)
View(dados_clientes)
summary(dados_clientes$Genero)
#Escolaridade
View(dados_clientes$Escolaridade)
dados_clientes$Genero <- cut(dados_clientes$Escolaridade,
c(1,2,3,4),
labels = c("Pos Graduado",
"Graduado",
"Ensino Médio",
"Fundamental"))
dados_clientes$Escolaridade <- cut(dados_clientes$Escolaridade,
c(1,2,3,4),
labels = c("Pos Graduado",
"Graduado",
"Ensino Médio",
"Fundamental"))
dados_clientes$Escolaridade <- cut(dados_clientes$Escolaridade,
c(1,2,3,4),
labels = c("Pos_Graduado",
"Graduado",
"Ensino_Médio",
"Fundamental"))
dados_clientes$Escolaridade <- cut(dados_clientes$Escolaridade,
c(0,1,2,3,4),
labels = c("Pos_Graduado",
"Graduado",
"Ensino_Médio",
"Fundamental"))
View(dados_clientes$Escolaridade)
str(dados_clientes$Escolaridade)
View(dados_clientes)
summary(dados_clientes$Escolaridade)
dados_clientes$Estado_Civil <- cut(dados_clientes$Estado_Civil,
c(0,1,2,3),
labels = c("Casado",
"Solteiro",
"Outros"))
View(dados_clientes$Estado_Civil)
str(dados_clientes$Estado_Civil)
View(dados_clientes)
summary(dados_clientes$Estado_Civil)
#Carregando DataSet
dados_clientes <- read.csv("dados/dataset.csv")
#Visualizar a estrutura
View(dados_clientes)
dim(dados_clientes)
str(dados_clientes)
summary(dados_clientes)
#Removendo a primeira coluna ID
dados_clientes$ID <- NULL
dim(dados_clientes)
View(dados_clientes)
#Renomeando a Coluna Classe
colnames(dados_clientes)
colnames(dados_clientes)[24] <- 'Inadiplente'
colnames(dados_clientes)
#Verificando valores ausentes nos campos e ver graficamento
sapply(dados_clientes, function(x) sum(is.na(x)))
missmap(dados_clientes, main = "Valores Missing Observados")
#Convertendo os alguns atributos  para fatores(categorias)
colnames(dados_clientes)
colnames(dados_clientes)[2] <- 'Genero'
colnames(dados_clientes)[3] <- 'Escolaridade'
colnames(dados_clientes)[4] <- 'Estado_Civil'
colnames(dados_clientes)[5] <- 'Idade'
colnames(dados_clientes)
dados_clientes$Genero <- cut(dados_clientes$Genero,
c(0,1,2),
labels = c("Masculino",
"Feminino"))
View(dados_clientes$Genero)
str(dados_clientes$Genero)
dados_clientes$Escolaridade <- cut(dados_clientes$Escolaridade,
c(0,1,2,3,4),
labels = c("Pos_Graduado",
"Graduado",
"Ensino_Médio",
"Fundamental"))
#Estado Civil
View(dados_clientes$Estado_Civil)
dados_clientes$Estado_Civil <- cut(dados_clientes$Estado_Civil,
c(-1,0,1,2,3),
labels = c("Deschecido",
"Casado",
"Solteiro",
"Outros"))
View(dados_clientes$Estado_Civil)
summary(dados_clientes$Estado_Civil)
#Faixa Etária
str(dados_clientes$Idade)
summary(dados_clientes$Idade)
hist(dados_clientes$Idade)
dados_clientes$Idade <- cut(dados_clientes$Idade,
c(0,30,50,100),
labels = c("Jovem",
"Adulto",
'Idoso'))
View(dados_clientes$Idade)
str(dados_clientes$Idade)
summary(dados_clientes$Idade)
View(dados_clientes)
#Os pagamentos - só converter sem mudar o conteúdo
dados_clientes!PAY_0 <- as.factor(dados_clientes$PAY_0)
dados_clientes!PAY_2 <- as.factor(dados_clientes$PAY_2)
dados_clientes!PAY_3 <- as.factor(dados_clientes$PAY_3)
#Os pagamentos - só converter sem mudar o conteúdo
dados_clientes$PAY_0 <- as.factor(dados_clientes$PAY_0)
dados_clientes$PAY_2 <- as.factor(dados_clientes$PAY_2)
dados_clientes$PAY_3 <- as.factor(dados_clientes$PAY_3)
dados_clientes$PAY_4 <- as.factor(dados_clientes$PAY_4)
dados_clientes$PAY_5 <- as.factor(dados_clientes$PAY_5)
dados_clientes$PAY_6 <- as.factor(dados_clientes$PAY_6)
#Dataset após as conversões
str(dados_clientes)
sapply(dados_clientes, function(x) sum(is,na(x)))
sapply(dados_clientes, function(x) sum(is.na(x)))
missmap(dados_clientes, main = "Valores Missing Observados")
dados_clientes <- na.omit(dados_clientes)
missmap(dados_clientes, main = "Valores Missing Observados")
dim(dados_clientes)
#Alterando a variável dependente para o tipo fator
str(dados_clientes$Inadiplente)
colnames(dados_clientes)
dados_clientes$Inadiplente <- as.factor(dados_clientes$Inadiplente)
str(dados_clientes$Inadiplente)
dados_clientes$Inadiplente <- as.factor(dados_clientes$Inadiplente)
str(dados_clientes$Inadiplente)
View(dados_clientes)
#Total de inadimplentes versus não inadimplentes
table(dados_clientes$Inadiplente)
#Porcentagens entre as classes
prop.table(table(dados_clientes$Inadiplente))
#Plot da distribuição usando ggplot2
qplot(Inadiplente, data = dados_clientes, geom = "bar") +
theme(axis.title.x = element_text(angle = 90, hjust = 1))
#Set seed
set.seed(12345)
View(dados_clientes)
#Amostragem estratificada
#Seleciona as linhas de acordo com a variável inadimplencia como strata
indice <- createDataPartition(dados_clientes$Inadiplente, p = 0.75, list=FALSE)
Dim(indice)
dim(indice)
#Definimos os dados de treinamento como subconjunto do conjunto de dados original
#com números de indices de linha (conforme identificado acima) e todas as colunas
dados_treino <- dados_clientes[indice,]
table(dados_treino$Inadiplente)
#Número de registros no dataset de treinamentos
dim(dados_treino)
prop.table(table(dados_treino$Inadiplente))
prop.table(table(dados_treino$Inadiplente))
#Número de registros no dataset de treinamentos
dim(dados_treino)
#Comparamos as porcentagens entre as classes de treinamento e dados originais
compara_dados <- cbind(prop.table(table(dados_treino$Inadiplente)),
prop.table(table(dados_clientes$Inadiplente)))
#Melt (derreter) - Converte colunas em linhas (parecido com copy especial do Excel)
melt_compara_dados <- melt(compara_dados)
#Comparamos as porcentagens entre as classes de treinamento e dados originais
compara_dados <- cbind(prop.table(table(dados_treino$Inadiplente)),
prop.table(table(dados_clientes$Inadiplente)))
#Comparamos as porcentagens entre as classes de treinamento e dados originais
compara_dados <- cbind(prop.table(table(dados_treino$Inadiplente)),
prop.table(table(dados_clientes$Inadiplente)))
colnames(compara_dados) <- c("Treinamento","Original")
compara_dados
#Melt (derreter) - Converte colunas em linhas (parecido com copy especial do Excel)
melt_compara_dados <- melt(compara_dados)
melt_compara_dados
#Ver a visualização
ggplot(melt_compara_dados, aes(x = x1, y=value)) +
geom_bar(aes(fill=x2), stat = "identity", position=dodge)+
theme(axis.text.x = elemente_text(angle = 90, hjust =1))
#Ver a visualização
ggplot(melt_compara_dados, aes(x = x1, y=value)) +
geom_bar(aes(fill=x2), stat = "identity", position=dodge)+
theme(axis.text.x = elemente_text(angle = 90, hjust =1))
#Plot da distribuição usando ggplot2
qplot(Inadiplente, data = dados_clientes, geom = "bar") +
theme(axis.title.x = element_text(angle = 90, hjust = 1))
#Set seed
set.seed(12345)
#Tudo o que não está no dataset de treinamento está no dataset de teste.
dados_teste <-dados_clientes[-indice,]
dim(dados_teste)
dim (dados_treino)
##### Machine Learning Application #####
### Version 1
modelo_v1 <- randomForest(Inadiplente ~., data=dados_treino)
modelo_v1
#Avaliando o Modelo
plot(modelo_v1)
#Previsões com dados de teste
previsoes_v1 = predict(modelo_v1, dados_teste)
#Confusion Matrix --> Avaliação do Modelo
cm_v1 = caret::confusionMatrix(previsoes_v1, dados_teste$Inadiplente, positive="1")
cm_v1
#Calculando Precision, Recall e F1-Score, métricas de avaliações do modelo preditivo
y <- dados_teste$Inadiplente
y_pred_v1 <- previsoes_v1
precision <- posPredValue(y_pred_v1, y)
precision
recall <- sensitivity(y_pred_v1, y)
recall
F1 <- (2 * precision * recall) / (precision + recall)
F1
#Balanceamento de classe
install.packages("DMwR")
library(DMwR)
#Balanceamento de classe
install.packages("DMwR")
#Balanceamento de classe
install.packages("DMwR2")
library(DMwR2)
?SMOTE
#Balanceamento de classe
install.packages("DMwR")
library(DMwR)
?SMOTE
??SMOTE
#Balanceamento de classe
install.packages("smotefamily")
library(smotefamily)
?SMOTE
#Aplicando o SMOTE - SMOTE: Synthetic Minority Over-sampling Technique
table(dados_treino$Inadiplente)
prop.table(table(dados_treino$Inadiplente))
set.seed(9560)
dados_treino_bal <- SMOTE(Inadiplente ~ ., data = dados_treino)
#Balanceamento de classe
install.packages("E:/Fontes_Estudo/PowerBI/mini-projeto 03/DMwR_0.4.1.tar", repos=NULL, type="source")
#Balanceamento de classe
install.packages("E:/Fontes_Estudo/PowerBI/mini-projeto 03/DMwR_0.4.1.tar.gz", repos=NULL, type="source")
recall
#Balanceamento de classe
install.packages("E:/Fontes_Estudo/PowerBI/mini-projeto 03/DMwR_0.4.1.tar.gz", repos=NULL, type="source")
#Balanceamento de classe
install.packages("E:\Fontes_Estudo\PowerBI\mini-projeto 03\DMwR_0.4.1.tar.gz", repos=NULL, type="source")
#Balanceamento de classe
install.packages("DMwR_0.4.1.tar.gz", repos=NULL, type="source")
#Balanceamento de classe
install.packages("E:/Fontes_Estudo/PowerBI/mini-projeto 03/DMwR_0.4.1.tar", repos=NULL, type="source")
#Balanceamento de classe
install.packages("/Fontes_Estudo/PowerBI/mini-projeto 03/DMwR_0.4.1.tar", repos=NULL, type="source")
#Balanceamento de classe
install.packages("DMwR")
library(smotefamily)
#Aplicando o SMOTE - SMOTE: Synthetic Minority Over-sampling Technique
#Ap´licando o oversampling
table(dados_treino$Inadiplente)
prop.table(table(dados_treino$Inadiplente))
set.seed(9560)
dados_treino_bal <- SMOTE(Inadiplente ~ ., data = dados_treino)
dados_treino_bal <- SMOTE(dados_treino,data_treino)
dados_treino_bal <- SMOTE(dados_treino,dados_treino)
dados_treino_bal <- SMOTE(dados_teste,dados_teste)
dados_treino_bal <- SMOTE(dados_treino[Inadiplente],dados_treino[Inadiplente])
dados_treino_bal <- SMOTE(dados_treino[Inadiplente],dados_treino)
#Balanceamento de classe
install.packages(c("zoo","xts","quantmod"))
install.packages(c("zoo", "xts", "quantmod"))
install.packages("E:/Fontes_Estudo/PowerBI/mini-projeto 03/DMwR_0.4.1.tar")
#Balanceamento de classe
install.packages("cran/DMwR")
#Balanceamento de classe
install.packages("DMwR2")
library(DMwR2)
library(DMwR2)
?SMOTE
load("E:/Fontes_Estudo/PowerBI/mini-projeto 03/.RData")
# Balanceamento de classe
install.packages("DMwR")
library(DMwR)
?SMOTE
# Aplicando o SMOTE - SMOTE: Synthetic Minority Over-sampling Technique
# https://arxiv.org/pdf/1106.1813.pdf
table(dados_treino$inadimplente)
prop.table(table(dados_treino$inadimplente))
set.seed(9560)
dados_treino_bal <- SMOTE(inadimplente ~ ., data  = dados_treino)
table(dados_treino_bal$inadimplente)
prop.table(table(dados_treino_bal$inadimplente))
# Construindo a segunda versão do modelo
modelo_v2 <- randomForest(inadimplente ~ ., data = dados_treino_bal)
modelo_v2
